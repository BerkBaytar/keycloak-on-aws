AWSTemplateFormatVersion: 2010-09-09
Description: Keycloark on AWS Solution.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: KeyCloak Setting
        Parameters:
          - ServiceName
          - Keypairname
          - KeycloakUsername
          - KeycloakPassword
      - Label:
            default: VPC Setting
        Parameters:
          - VPC
          - publicSubnetA
          - publicSubnetB
          - privateSubnetA
          - privateSubnetB

      - Label:
            default: ACM Setting, This cetificate will be used in HTTPS
        Parameters:
          - Certificate
      
      - Label:
          default: Database Setting
        Parameters:
          - DatabaseInstanceType
          - DatabaseUsername
          - DatabasePassword
      
      - Label:
          default: ECS Setting & AutoScaling
        Parameters:
          - MinContainers
          - MaxContainers
          - AutoScalingTargetValue


Parameters:
  ServiceName:
    Type: String
    # update with the name of the service
    Default: KeyCloakOnAWS
    Description: >-
      A custom identifier as resource name prefix. 

  VPC:
    Type: AWS::EC2::VPC::Id
  publicSubnetA:
    Type: AWS::EC2::Subnet::Id
  publicSubnetB:
    Type: AWS::EC2::Subnet::Id
  privateSubnetA:
    Type: AWS::EC2::Subnet::Id
  privateSubnetB:
    Type: AWS::EC2::Subnet::Id

  Certificate:
    Type: String
    # Update with the certificate ARN from Certificate Manager, which must exist in the same region.
    ConstraintDescription: >-
      This Cetificate ARN must  as same as the ARN in ACM.
    Description: >-
      This ACM  Cetificate will be used in ALB HTTPS listener. Example: 'arn:aws:acm:region:123456789012:certificate/00000000-0000-0000-0000-000000000000'

  Keypairname:
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must specify an admin access key pair for keycloak instances.
    Description: Amazon EC2 Key Pair for admin access.
  # for autoscaling
  MinContainers:
    Type: Number
    Default: 2
  # for autoscaling
  MaxContainers:
    Type: Number
    Default: 10
  # target CPU utilization (%)
  AutoScalingTargetValue:
    Type: Number
    Default: 75
  DatabaseInstanceType:
    Default: db.r4.xlarge
    AllowedValues:
        - db.t2.small
        - db.t2.medium
        - db.t2.large
        - db.t2.xlarge
        - db.t2.2xlarge
        - db.m4.large
        - db.m4.xlarge
        - db.m4.2xlarge
        - db.m4.4xlarge
        - db.m4.10xlarge
        - db.m4.16xlarge
        - db.r4.large
        - db.r4.xlarge
        - db.r4.2xlarge
        - db.r4.4xlarge
        - db.r4.8xlarge
        - db.r4.16xlarge
    Description: "The instance type to use for the database."
    Type: String
  DatabasePassword:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters. Must have length 8-41.
    Description: The database admin account password. (Choose a secure password)
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  
  DatabaseUsername:
    Default: "admin"
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters. Must have length 1-16
    Description: The database admin account user name. (Default "admin")
    MaxLength: '16'
    MinLength: '1'
    Type: String
  KeycloakUsername:
    Default: "admin"
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters. Must have length 1-16
    Description: The database admin account user name. (Default "admin")
    MaxLength: '16'
    MinLength: '1'
    Type: String
  KeycloakPassword:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters. Must have length 8-41.
    Description: The keycloak admin account password. It will be used as keycloak console login.
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String


Mappings:
    AWSRegionToAMI:
        cn-north-1:
            AMI: ami-070bbaf63a64f1ddc
        cn-northwest-1:
            AMI: ami-0e21949a0d60b93e2
            

Resources:
  Cluster: 
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ServiceName, Cluster]]

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
        DBSubnetGroupDescription: Database subnet group. Suggest put database in private subnet.
        SubnetIds:
            - !Ref privateSubnetA
            - !Ref privateSubnetB
  DataSource:
    Type: AWS::RDS::DBInstance
    Metadata:
      cfn_nag:
        rules_to_suppress:
            - id: W28
              reason: Resource found with an explicit name, this disallows updates that require replacement of this resource
            - id: F80
              reason: RDS instance should have deletion protection enabled
            - id: F24
              reason: RDS instance master username must not be a plaintext 
    Properties:
      DBName: 'keycloak' #must use keycloak as database name
      AllocatedStorage: '100'
      BackupRetentionPeriod: 7 # backup 7 days data automatically
      DBInstanceIdentifier: !Ref ServiceName
      MultiAZ: true
      StorageType: standard
      StorageEncrypted: true
      DBInstanceClass: !Ref DatabaseInstanceType
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: MySQL
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      PubliclyAccessible: false
      Tags: 
        - Key: Name
          Value: !Ref ServiceName
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup

  DatabaseSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W9
              reason: "Security Groups found with ingress cidr that is not /32"
            - id: W36
              reason: "Security Groups found with ingress cidr that is not /32"
            - id: F100
              reason: "Security Groups found with ingress cidr that is not /32"
            - id: F1000
              reason: "Missing egress rule means all traffic is allowed outbound."
      Properties: 
          VpcId: !Ref VPC
          GroupDescription: Access to database
          SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 3306
                ToPort: 3306
                SourceSecurityGroupId: !Ref ContainerSecurityGroup
              - IpProtocol: tcp
                FromPort: 3306
                ToPort: 3306
                SourceSecurityGroupId: !Ref Ec2SecurityGroup
          Tags: 
            - Key: Name
              Value: keycloak-security-group

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 4096
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 30GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          # Image: 'jboss/keycloak'
          Image: "048912060910.dkr.ecr.cn-northwest-1.amazonaws.com.cn/dockerhub/jboss/keycloak:10.0.0"
          Environment:
            - Name: DB_ADDR
              Value: !GetAtt DataSource.Endpoint.Address
            - Name: DB_DATABASE
              Value: 'keycloak'
            - Name: DB_PASSWORD
              Value: !Ref DatabasePassword
            - Name: DB_PORT
              Value: 3306
            - Name: DB_USER
              Value: !Ref DatabaseUsername
            - Name: DB_VENDOR
              Value: 'mysql'
            - Name: JDBC_PARAMS
              Value: 'useSSL=false'
            - Name: KEYCLOAK_PASSWORD
              Value: !Ref KeycloakPassword
            - Name: KEYCLOAK_USER
              Value: !Ref KeycloakUsername
            - Name: PROXY_ADDRESS_FORWARDING
              Value: true
          PortMappings:
            - ContainerPort: 8443
            - ContainerPort: 8080
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
            - id: W28
              reason: "Resource found with an explicit name, this disallows updates that require replacement of this resource"
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws-cn:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
            - id: W28
              reason: "Resource found with an explicit name, this disallows updates that require replacement of this resource"
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      # ManagedPolicyArns:
      #   -
      # Policies:
      #   -
  # A role needed for auto scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
            - id: W28
              reason: "Resource found with an explicit name, this disallows updates that require replacement of this resource"
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws-cn:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
            - id: W2
              reason:  Security Groups found with cidr open to world on ingress.  This should never be true on instance.  Permissible on ELB
            - id: W9
              reason:  Security Groups found with ingress cidr that is not /32
            - id: W36
              reason:  Security group rules without a description obscure their purpose and may lead to bad practices in ensuring they only allow traffic from the ports and sources/destinations required.
            - id: F1000
              reason: "Missing egress rule means all traffic is allowed outbound."
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
            - id: W2
              reason:  Security Groups found with cidr open to world on ingress.  This should never be true on instance.  Permissible on ELB
            - id: W9
              reason:  Security Groups found with ingress cidr that is not /32
            - id: W36
              reason:  Security group rules without a description obscure their purpose and may lead to bad practices in ensuring they only allow traffic from the ports and sources/destinations required.
            - id: F1000
              reason: "Missing egress rule means all traffic is allowed outbound."
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, LoadBalancerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - ListenerHTTP
      - AutoScalingGroup
    Properties: 
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 2
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref privateSubnetA
            - !Ref privateSubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
        - ContainerName: !Ref ServiceName
          ContainerPort: 8443
          TargetGroupArn: !Ref TargetGroupHttps
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT12H
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: AutoScalingGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: '/'
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref ServiceName, TargetGroup]]
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: !Ref VPC
  TargetGroupHttps:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: AutoScalingGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: '/'
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref ServiceName, TargetGroupHttps]]
      Port: 8443
      Protocol: HTTPS
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
        - Key: stickiness.enabled
          Value: true
      TargetType: ip
      VpcId: !Ref VPC
  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
      cfn_nag:
        rules_to_suppress:
            - id: W56 
              reason: "Elastic Load Balancer V2 should have access logging enabled"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
      cfn_nag:
        rules_to_suppress:
            - id: W56 
              reason: "Elastic Load Balancer V2 should have access logging enabled"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupHttps
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08
      Certificates:
        - CertificateArn: !Ref Certificate
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Metadata:
      cfn_nag:
        rules_to_suppress:
            - id: W52
              reason: "Elastic Load Balancer V2 should have access logging enabled"
            - id: W28
              reason: "Elastic Load Balancer V2 should have access logging enabled"
    Properties:
      LoadBalancerAttributes:
        # this is the default, but is specified here in case it needs to be changed
        - Key: idle_timeout.timeout_seconds
          Value: 120
      Name: !Join ['', [!Ref ServiceName, LoadBalancer]]
      # "internal" is also an option
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref publicSubnetA
        - !Ref publicSubnetB
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 75% CPU utilization, for example
        TargetValue: !Ref AutoScalingTargetValue
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: DataSource
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: 1
      MinSize: 0
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref privateSubnetA
        - !Ref privateSubnetB
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT12H
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  AutoScalingPolicyforec2:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 60
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: / 
      Roles:
      - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com.cn
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws-cn:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws-cn:iam::aws:policy/AmazonECS_FullAccess'
        - 'arn:aws-cn:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser'
      # Policies:
      # - PolicyName: ec2-init-rds-keycloak-database
      #   PolicyDocument:
      #     Version: 2012-10-17
      #     Statement:
      #     - Effect: Allow
      #       Action: "*"
      #       Resource: "*"
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
            - id: W9 
              reason: "Security Groups found with ingress cidr that is not /32"
            - id: W2
              reason: "Security Groups found with cidr open to world on ingress."
            - id: W36
              reason:  Security group rules without a description obscure their purpose and may lead to bad practices in ensuring they only allow traffic from the ports and sources/destinations 
            - id: F1000
              reason: "Missing egress rule means all traffic is allowed outbound."
    Properties:
      GroupDescription: "ec2 asg security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration      
    DependsOn: DataSource    
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceMonitoring: true
      InstanceType: "t3.xlarge"
      KeyName: !Ref Keypairname
      SecurityGroups:
        - !Ref Ec2SecurityGroup
      UserData:
        "Fn::Base64": 
          !Sub |
            #!/bin/bash
            amazon-linux-extras install docker -y
            service docker start
            aws ecr get-login --region cn-northwest-1 --registry-ids 048912060910 --no-include-email | sh
            docker pull 048912060910.dkr.ecr.cn-northwest-1.amazonaws.com.cn/dockerhub/jboss/keycloak:10.0.0
            docker run -d -p 0.0.0.0:80:8080 --name keycloak -e KEYCLOAK_USER=${KeycloakUsername} -e KEYCLOAK_PASSWORD=${KeycloakPassword} -e DB_VENDOR=mysql -e DB_USER=${DatabaseUsername} -e DB_PASSWORD=${DatabasePassword} -e DB_ADDR=${DataSource.Endpoint.Address} -e DB_PORT=3306 -e DB_DATABASE=keycloak -e JDBC_PARAMS="useSSL=false" 048912060910.dkr.ecr.cn-northwest-1.amazonaws.com.cn/dockerhub/jboss/keycloak:10.0.0
            http_code=000
            while [ $http_code -ne 200 ]
            do
               http_code=$(curl -I  -m  10  -o  /dev/null  -s  -w  %{http_code}   http://localhost:80)
               sleep  2s
               echo "insleep"
               echo $http_code
            done
            echo "success"
            echo $http_code
            # set ASG to zero which terminates instance
            availabilityzone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
            region=${!availabilityzone:0:-1}
            instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            asg_name=$(sudo aws autoscaling describe-auto-scaling-instances --instance-ids $instance_id --region $region --output text --query 'AutoScalingInstances[0].AutoScalingGroupName')
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg_name --desired-capacity 0 --region $region      
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
Outputs:
  LoadBalancer:
    Description: LoadBalancer DNS name
    Value: !GetAtt 
      - LoadBalancer
      - DNSName